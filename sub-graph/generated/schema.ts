// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tenant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("handle", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tenant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tenant entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tenant", id.toString(), this);
    }
  }

  static load(id: string): Tenant | null {
    return changetype<Tenant | null>(store.get("Tenant", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get hasLease(): boolean {
    let value = this.get("hasLease");
    return value!.toBoolean();
  }

  set hasLease(value: boolean) {
    this.set("hasLease", Value.fromBoolean(value));
  }

  get leases(): Array<string> | null {
    let value = this.get("leases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set leases(value: Array<string> | null) {
    if (!value) {
      this.unset("leases");
    } else {
      this.set("leases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rentPayments(): Array<string> | null {
    let value = this.get("rentPayments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rentPayments(value: Array<string> | null) {
    if (!value) {
      this.unset("rentPayments");
    } else {
      this.set("rentPayments", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("handle", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Owner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get leases(): Array<string> | null {
    let value = this.get("leases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set leases(value: Array<string> | null) {
    if (!value) {
      this.unset("leases");
    } else {
      this.set("leases", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rentPayments(): Array<string> | null {
    let value = this.get("rentPayments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rentPayments(value: Array<string> | null) {
    if (!value) {
      this.unset("rentPayments");
    } else {
      this.set("rentPayments", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Lease extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tenant", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("rentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("totalNumberOfRents", Value.fromBigInt(BigInt.zero()));
    this.set("paymentToken", Value.fromBytes(Bytes.empty()));
    this.set("currencyPair", Value.fromString(""));
    this.set("rentPaymentInterval", Value.fromBigInt(BigInt.zero()));
    this.set("rentPaymentLimitTime", Value.fromBigInt(BigInt.zero()));
    this.set("startDate", Value.fromBigInt(BigInt.zero()));
    this.set("status", Value.fromString(""));
    this.set("cancelledByOwner", Value.fromBoolean(false));
    this.set("cancelledByTenant", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lease entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Lease entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Lease", id.toString(), this);
    }
  }

  static load(id: string): Lease | null {
    return changetype<Lease | null>(store.get("Lease", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tenant(): string {
    let value = this.get("tenant");
    return value!.toString();
  }

  set tenant(value: string) {
    this.set("tenant", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get rentAmount(): BigInt {
    let value = this.get("rentAmount");
    return value!.toBigInt();
  }

  set rentAmount(value: BigInt) {
    this.set("rentAmount", Value.fromBigInt(value));
  }

  get totalNumberOfRents(): BigInt {
    let value = this.get("totalNumberOfRents");
    return value!.toBigInt();
  }

  set totalNumberOfRents(value: BigInt) {
    this.set("totalNumberOfRents", Value.fromBigInt(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    return value!.toBytes();
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get currencyPair(): string {
    let value = this.get("currencyPair");
    return value!.toString();
  }

  set currencyPair(value: string) {
    this.set("currencyPair", Value.fromString(value));
  }

  get rentPaymentInterval(): BigInt {
    let value = this.get("rentPaymentInterval");
    return value!.toBigInt();
  }

  set rentPaymentInterval(value: BigInt) {
    this.set("rentPaymentInterval", Value.fromBigInt(value));
  }

  get rentPaymentLimitTime(): BigInt {
    let value = this.get("rentPaymentLimitTime");
    return value!.toBigInt();
  }

  set rentPaymentLimitTime(value: BigInt) {
    this.set("rentPaymentLimitTime", Value.fromBigInt(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value!.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }

  get tenantReviewUri(): string | null {
    let value = this.get("tenantReviewUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tenantReviewUri(value: string | null) {
    if (!value) {
      this.unset("tenantReviewUri");
    } else {
      this.set("tenantReviewUri", Value.fromString(<string>value));
    }
  }

  get ownerReviewUri(): string | null {
    let value = this.get("ownerReviewUri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ownerReviewUri(value: string | null) {
    if (!value) {
      this.unset("ownerReviewUri");
    } else {
      this.set("ownerReviewUri", Value.fromString(<string>value));
    }
  }

  get cancelledByOwner(): boolean {
    let value = this.get("cancelledByOwner");
    return value!.toBoolean();
  }

  set cancelledByOwner(value: boolean) {
    this.set("cancelledByOwner", Value.fromBoolean(value));
  }

  get cancelledByTenant(): boolean {
    let value = this.get("cancelledByTenant");
    return value!.toBoolean();
  }

  set cancelledByTenant(value: boolean) {
    this.set("cancelledByTenant", Value.fromBoolean(value));
  }

  get rentPayments(): Array<string> | null {
    let value = this.get("rentPayments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rentPayments(value: Array<string> | null) {
    if (!value) {
      this.unset("rentPayments");
    } else {
      this.set("rentPayments", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class RentPayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("paymentToken", Value.fromBytes(Bytes.empty()));
    this.set("validationDate", Value.fromBigInt(BigInt.zero()));
    this.set("rentPaymentDate", Value.fromBigInt(BigInt.zero()));
    this.set("rentPaymentLimitDate", Value.fromBigInt(BigInt.zero()));
    this.set("exchangeRate", Value.fromBigInt(BigInt.zero()));
    this.set("exchangeRateTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("withoutIssues", Value.fromBoolean(false));
    this.set("tenant", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("lease", Value.fromString(""));
    this.set("status", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RentPayment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RentPayment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RentPayment", id.toString(), this);
    }
  }

  static load(id: string): RentPayment | null {
    return changetype<RentPayment | null>(store.get("RentPayment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    return value!.toBytes();
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get validationDate(): BigInt {
    let value = this.get("validationDate");
    return value!.toBigInt();
  }

  set validationDate(value: BigInt) {
    this.set("validationDate", Value.fromBigInt(value));
  }

  get rentPaymentDate(): BigInt {
    let value = this.get("rentPaymentDate");
    return value!.toBigInt();
  }

  set rentPaymentDate(value: BigInt) {
    this.set("rentPaymentDate", Value.fromBigInt(value));
  }

  get rentPaymentLimitDate(): BigInt {
    let value = this.get("rentPaymentLimitDate");
    return value!.toBigInt();
  }

  set rentPaymentLimitDate(value: BigInt) {
    this.set("rentPaymentLimitDate", Value.fromBigInt(value));
  }

  get exchangeRate(): BigInt {
    let value = this.get("exchangeRate");
    return value!.toBigInt();
  }

  set exchangeRate(value: BigInt) {
    this.set("exchangeRate", Value.fromBigInt(value));
  }

  get exchangeRateTimestamp(): BigInt {
    let value = this.get("exchangeRateTimestamp");
    return value!.toBigInt();
  }

  set exchangeRateTimestamp(value: BigInt) {
    this.set("exchangeRateTimestamp", Value.fromBigInt(value));
  }

  get withoutIssues(): boolean {
    let value = this.get("withoutIssues");
    return value!.toBoolean();
  }

  set withoutIssues(value: boolean) {
    this.set("withoutIssues", Value.fromBoolean(value));
  }

  get tenant(): string {
    let value = this.get("tenant");
    return value!.toString();
  }

  set tenant(value: string) {
    this.set("tenant", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get lease(): string {
    let value = this.get("lease");
    return value!.toString();
  }

  set lease(value: string) {
    this.set("lease", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
